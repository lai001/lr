use clap::{Args, Parser};
use ra_ap_vfs::*;
use rs_reflection_generator::reflection_context::{ParseResult, ReflectionContext};
use std::{collections::HashMap, path::PathBuf};

#[derive(Debug, Clone, Args)]
pub struct GeneratorArgs {
    #[arg(short, long)]
    pub manifest_file: std::path::PathBuf,
}

#[derive(Parser, Debug, Clone)]
#[command(author, version, about, long_about = None)]
#[command(propagate_version = true)]
pub enum Cli {
    Generator(GeneratorArgs),
}

fn generate(generator_args: GeneratorArgs) -> anyhow::Result<()> {
    let GeneratorArgs { manifest_file } = generator_args;
    let reflection_context = ReflectionContext::new(AbsPathBuf::assert_utf8(manifest_file))?;
    let parse_results = reflection_context.parse_crate();
    let mut parse_results_map: HashMap<PathBuf, Vec<ParseResult>> = HashMap::new();
    for parse_result in parse_results {
        let entry = parse_results_map.entry(parse_result.target_output_suffix.clone());
        entry.or_insert(vec![]).push(parse_result);
    }
    let output_dir = rs_core_minimal::file_manager::get_engine_generated_dir().join("reflection");
    if !output_dir.exists() {
        std::fs::create_dir_all(&output_dir)?;
    }
    for (output_suffix, parse_results) in parse_results_map {
        let mut token_stream = quote::quote! {
            /// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
            #[allow(warnings)]
            use rs_reflection_core::*;
        };
        let output_path = output_dir.join(output_suffix);
        let dir = output_path.parent().expect("A valid path");
        if !dir.exists() {
            let _ = std::fs::create_dir_all(&dir);
        }
        for parse_result in parse_results {
            token_stream.extend(parse_result.generate_reflection_token_stream()?);
        }
        log::debug!("{:?}", &output_path);
        std::fs::write(&output_path, token_stream.to_string())?;
    }
    Ok(())
}

fn main() -> anyhow::Result<()> {
    env_logger::builder()
        .filter_module(module_path!(), log::LevelFilter::Trace)
        .init();
    let cli = Cli::parse();
    match cli {
        Cli::Generator(generator_args) => generate(generator_args),
    }
}
